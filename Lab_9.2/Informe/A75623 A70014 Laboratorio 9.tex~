
\documentclass[11pt]{article}
\usepackage{vmargin}
\usepackage{booktabs}
\usepackage{amssymb}
\usepackage{listings}
\usepackage{color}
\usepackage{graphicx,subfigure}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}

\definecolor{mygray}{rgb}{0.4,0.4,0.4}
\definecolor{mygreen}{rgb}{0,0.8,0.6}
\definecolor{myorange}{rgb}{1.0,0.4,0}

\lstset{
basicstyle=\footnotesize\sffamily\color{black},
commentstyle=\color{mygray},
frame=single,
numbers=left,
numbersep=5pt,
numberstyle=\tiny\color{mygray},
keywordstyle=\color{mygreen},
showspaces=false,
showstringspaces=false,
stringstyle=\color{myorange},
tabsize=2,
language=C++,
emph={int,char,double,float,unsigned},
                   emphstyle={\color{blue}}
}

\graphicspath{{images/}}
\setpapersize{A4}
\setmargins{2cm}       % margen izquierdo
{1.5cm}                % margen superior
{16.5cm}               % anchura del texto
{23.42cm}              % altura del texto
{10pt}                 % altura de los encabezados
{1cm}                  % espacio entre el texto y los encabezados
{0pt}                  % altura del pie de página
{2cm}          

\begin{document}
	
	%El nombre del archivo debe venir con el nombre de "Carné. Reporte [-Número de reporte-].pdf" sin importar el procesador de texto que utilicen
	
	\noindent\textbf{CI-1311 Laboratorio de Sistemas Operativos}\\
	\textbf{Reporte lab 9}\\
	\textbf{Steven Rojas Lizano $|$ A75623 $|$ Grupo 2}\\
  \textbf{Denis Abarca Quesada $|$ A70014 $|$ Grupo 1}\\
	\rule{400pt}{0.1pt}\\ 
	
	% Procedimientos
	% La demostración debe ser con pantallazos que muestren toda la solución para el punto que corresponde
	\section{Objetivos}
	\begin{enumerate}
	  \item Entender el concepto de "PageFault" y comprender los elementos involucrados.
	  \item Modificar el constructor de "AddrSpace" para permitir el uso de mapas de bits (bitmaps).
    \item Definir las estructuras de datos para que puedan ser actualizadas por procesos concurrentes.
	\end{enumerate}
	
  \section{pageFault }
  \begin{enumerate}
    \item   Estudiar el método "Translate" e identificar y anotar en su diseño cómo y cuándo es que se produce el "PageFault exception"
    
     \begin{enumerate}
       \item para ello debe revisar el código en el archivo "machine/translate.cc" \\
      La excepcion de pagefault se da cuando ocurre una de las 2 siguientes situaciones: se intenta acceder a una pagina que es mas grande que la TLB o se intenta acceder a una pagina que no se encuentra valida.
    \item Para realizar las lecturas o escrituras a la memoria del procesador MIPS, el simulador utiliza los métodos "Machine::ReadMem" y "Machine::WriteMem", note que estos métodos utilizan direcciones virtuales o lógicas, anote ¿Por qué?; explicar los casos en que estos métodos retornan falso. \\
      Este metodo solamente retorna falso cuando existe una excepcion.
      \item Explicar como se traducen las direcciones virtuales a físicas en los métodos anteriores. \\
        Para esto primeramente se obtiene el valor de la pagina y el offset, a partir del valor de la pagina se obtiene el pageframe desde la TLB o la pagetabl, finalmente se obtiene la direccion fisica a partir de la siguiente linea de codigo
        \begin{lstlisting}
*physAddr = pageFrame * PageSize + offset;
        \end{lstlisting}  
      \item Explicar el funcionamiento del método "Translate", describa los parámetros que recibe este método, su tipo y una explicación propia de para qué se utilizan, además anote el tipo de retorno del método, las posibles excepciones que puede retornar y por qué se generan.\\
        Primeramente podemos ver en la siguiente linea de codigo los parametros del metodo:
        \begin{lstlisting}
Machine::Translate(int virtAddr, int* physAddr, int size, bool writing)
        \end{lstlisting}
          El primer parametro es la direccion de memoria virtual que es manejada por la maquina MIPS, el segundo es un apuntador a un entero que apuntara a la direccion de memoria fisica del sistema linux, el tercer parametro es la cantidad de bytes que se escribiran (1,2 o 4) y finalmente el ultimo parametro es para separar la opcion de escribir de la opcion de leer. 
          \end{enumerate}
          \item Describir la manera cómo se emplea el TLB (Translation Look-Aside Buffer) en el procesador MIPS.\\
            Esta se emplea como un TranslationEntry de solamente 4 entradas para simular un cache.
          
          \begin{enumerate}
            \item Describir en su diseño los elementos de la estructura "pageTable" en la clase "AddrSpace".\\
              
            

          
   
          
          \begin{enumerate}
            \item ¿De qué tamaño es el encabezado?\\
            El encabezado es un struct definido en el archivo Noff.h y su tamaño esta dado por los elementos que lo componen. los cuales a su vez estan constituidos por structs del tipo segment por lo que el tamaño del encabezado es de 40 bytes. 
            \item ¿Cuál es el número mágico?\\
            El número mágico se define también en Noff.h y tiene el valor 0xbadfad
            \item Puede verificar el número con hexdump\\
            El resultado se puede observar en la figura \ref{fig:01} en los primeros 8 bytes en little endian
            \begin{lstlisting}
hexdump -n 128 -C ../test/halt              
            \end{lstlisting}\
            \begin{figure}[hbt]
              \begin{center}
                \includegraphics[width=0.5\textwidth]{01_comandoHex.png}
                \caption{Ejecucion del comando HexDump}
                \label{fig:01}
              \end{center}
            \end{figure}
            \item  Analice la estructura de los segmentos de NachOS y anote en su informe la estructura del encabezado de los programas ejecutables de MIPS.\\
            Como se menciona anteriormente los segmentos en nachos son formados pro una estrutura que cuenta de tres enteros, tamaño del segmento, la dirección física de memoria y la dirección virtual.
          \end{enumerate}
          \item Cómo es establecido el tamaño del proceso?\\
          Esto se establece desde la lectura del encabezado ya que cada segmento posee su valor de tamano en su struct respectivo, al agregar el siguiente codigo se puede observar el tamano de los segmentos y el resultado se puede observar en la figura \ref{fig:02}
          \begin{lstlisting}
  size = noffH.code.size + noffH.initData.size + noffH.uninitData.size 
			+ UserStackSize;	// we need to increase the size
						// to leave room for the stack
	printf("tamano de segmento de codigo: %d\n",noffH.code.size);
	printf("tamano de segmento de datos incializados: %d\n",noffH.initData.size);
	printf("tamano de segmento de datos no inicializados: %d\n",noffH.uninit.size);
	printf("tamano de segmento de pila: %d",UserStack);
          \end{lstlisting}
          \begin{figure}[hbt]
              \begin{center}
                \includegraphics[width=0.5\textwidth]{02_tamanoSeg.png}
                \caption{Demostracion del tamano de segmentos}
                \label{fig:02}
              \end{center}
            \end{figure}
          \begin{enumerate}
            \item ¿Cuál es el tamaño del segmento de código (T)?\\
            Como se muestra en la figura \ref{fig:02} el tamaño del segmento de código es de 464 bytes
            \item ¿Cuál es el tamaño del segmento de datos (D)?
            \item ¿Cuál es el tamaño de la pila (S)? \\
            El tamaño de la pila es definido por el usuario y por defecto se encuentra en 1024 bytes
            \item ¿Alguno de estos tamaños puede ser cero? \\
            si, los segmentos pueden tener un tamaño de cero,
          \end{enumerate}
          \item Cómo el programa es cargado (del disco) a memoria?
          \begin{enumerate}
            \item ¿Cómo se realiza la lectura del disco?, Anote en su informe el nombre de la clase encargada de realizar esta lectura\\
            la clase encargada de realizar la carga del disco a memoria es Openfile y el se realiza mediante el método de "readAt"
            \item ¿Cómo se determina el archivo de donde se realiza la lectura?\\
            El archivo origen es dado por los argumentos pasados a nachos por medio de la línea de comandos y el uso de -x que indica que se ejecutará un programa de usuario. seguidamente se pasa dicho argumento al método startProcess el cual es implementado en el archivo progtest
           $    OpenFile *executable = fileSystem->Open(filename);$
           
            
            \item ¿Cómo se indica la cantidad de bytes que se quiere leer?\\
            La cantidad de bytes a leer se indica como segundo parámetro de la función readAt de la clase OpenFile.
            \item ¿Cómo hacer para leer del archivo solo una página (128 bytes)?\\
              Existe una constante llamada pagesize la cual abría que pasar como parámetro a la función readAt.
            \item ¿Cuál es la posición dentro del archivo de lectura?\\
            si se desea leer la primera página del archivo, se debe indicar el tamaño del encabezado en el tercer parámetro de la función readAt.
          \end{enumerate}
          \item Cómo es la información colocada en la memoria?
          \begin{enumerate}
            \item ¿Cuál es la posición en la memoria?\\
            inicialmente se coloca la memoria en la posición de la tabla 0, siempre que se ejecute un programa de usuario será guardado en la posición 0.
            \item ¿Cómo se puede cambiar esta dirección?\\
            Esto se puede lograr con el uso de un bitmap del tamaño de la tabla de páginas donde se guarden las posiciones utilizadas.
            \item Anote en su informe la estrategia que va a seguir para colocar las páginas de 128 bytes leidas del archivo ejecutables en las posiciones de memoria correspondientes (frames) también de 128 bytes\\
            Para esto se iran leyendo en tramos de 128 byte para un ciclo en donde se irán restando del total la cantidad de bytes leidos hasta que ya no se posean más bytes por leer
            \item Anote en su informe cómo va a manejar las páginas que se leen del archivo cuyo tamaño es menor que 128 bytes.
             Como se irán restando del total los bytes leidos es suficiente con pasar los bytes restantes si son menores a 128 bytes.
            \item Anote en su informe su estrategia para manejar páginas que pueden tener información de segmentos distintos, por ejemplo de código (T) y datos (D)\\
            Para esto se hace uso de los encabezados noff del archivo en donde se indican los tamaños que tienen los segmentos, entonces se pueden guardar en páginas separadas al leer la cantidad máxima de bytes de cada segmento del encabezado
          \end{enumerate}
     \end{enumerate}
     \end{enumerate}
  \section{Funcionamiento de la clase "TranslationEntry"}
     \begin{enumerate}
       \item     Cada vez que el procesador (MIPS) realiza un acceso a memoria, se emplea un registro especial (pageTable) para realizar la traducción de las direcciones
       \begin{enumerate}
         \item         Como referencia estudiar el código en el archivo "machine/translate.cc" los métodos "Machine::Translate", "Machine::ReadMem" y "Machine::WriteMem"\\
         El método WriteMem alza una excepción del tipo write la cual es manejada por la clase execption, 
         \item También puede revisar la estructura de la máquina MIPS que se construye en "machine/machine.h"
        \item También heche un vistazo por los métodos "AddrSpace::InitRegisters", "AddrSpace::RestoreState" y "AddrSpace::SaveState"
        \item Explique como esta estructura (pageTable) es construida y llenada en el constructor de "AddrSpace"\\
        Esta estructura se construye desde cero y luego es limpia, seguidamente se recorre con un for y se llenan los espacios, finalmente se hace una copia de la memoria de unix a la memoria del MIPS.
        \item Por ahora el mapeo se realiza asignando a cada página lógica de un proceso la misma página física, ( 0 -> 0, 1 -> 1, etc.). Para poder correr varios programas de usuario en la misma memoria física es necesario cambiar esta manera de asignación.\\
        Esto se logra mediante el uso de un bitmap y asignandole las posiciones libres del bitmap al proceso.
       \end{enumerate}
     \end{enumerate} 
     
     %%---------------Bitmap-----------------------------
  \section{Métodos de la clase BitMap}
    \begin{enumerate}
      \item     Escriba en su informe cómo crear un mapa de bits que represente la memoria del procesador MIPS que estamos simulando. Debe conocer el tamaño (ver machine/machine.h) en páginas de esa memoria. Este mapa de bits indicará si la página está ocupada o libre.\\
      Para esto se crea un mapa del mismo tamaño que las paginas físicas que posee el módelo MIPS que es de 32 páginas y cada página es de 128 bytes.
      \item Cómo esta es una estructura que puede ser compartida por varios hilos, escriba en su informe la manera en que hará que su uso sea de acceso exclusivo. No es necesario hacerlo para este laboratorio.\\
      Esto puede ser logrado mediante el uso de un lock de la memoria, el cual no permitiría su uso mientras que no se haya terminado de utilizar

    \end{enumerate}
    %%-----------memoria Nachos---------------
    \section{Administración de la memoria de NachOS para programas de usuario}
    \begin{enumerate}
      \item Cree una estructura de datos (BitMap) para representar las páginas de la memoria. Puede colocarla como una variable global en los archivos "system.h" y "system.cc" en el directorio "threads", su declaración debe ser similar a la de la variable "currentThread"
      \begin{enumerate}
        \item Para crear una variable global, debe agregarla en el archivo "system.h", por ejemplo "MiMapa" de esta manera 
        \begin{lstlisting}
#ifdef USER_PROGRAM
#include "machine.h"
extern Machine* machine;	// user program memory and registers

extern BitMap MiMapa;		// Declares a global variable defined elsewhere
...
#endif
        \end{lstlisting}
        \item  Note que la declaración se puede hacer dentro un \#ifdef para hacerla condicional
        \item  Además, la variable debe existir en el archivo "system.cc"
        \begin{lstlisting}
#ifdef USER_PROGRAM	// requires either FILESYS or FILESYS_STUB
BitMap MiMapa;		// Variable definition, no extern prepended
\end{lstlisting}          

      \end{enumerate}
      \item  Haga que NachOS utilice esta estructura para solicitar las páginas de memoria y actualizar la tabla de páginas del proceso. Por el momento, asegúrese de que el programa obtenga las mismas páginas que antes (0, 1, 2, etc.). No cambie la manera en que el programa es cargado en la memoria\\
      Para la busqueda de páginas disponibles se utiliza un arreglo de enteros donde se guardarán las posiciones futuras donde se almacenarán las páginas, como se muestra en el siguiente código
      \begin{lstlisting}
int positions[32];
for (unsigned int i=0; i<numPages;i++)
{
	positions[i]= pageTableMap->Find();
}
      \end{lstlisting}
      seguidamente se utilizan estas posiciones para guardar las paginas del sistema mediante una modificación en el índice de la estructura del page table, como se muestra a continuación:
      \begin{lstlisting}
for (i = 0; i < numPages; i++) {
  pageTable[positions[i]].virtualPage = i;	// for now, virtual page # = phys page #
  pageTable[positions[i]].physicalPage = i;
  pageTable[positions[i]].valid = true;
  pageTable[positions[i]].use = false;
  pageTable[positions[i]].dirty = false;
  pageTable[positions[i]].readOnly = false;  // if the code segment was entirely on 
}
      \end{lstlisting}
      \item Recuerde asignar las páginas de los datos no inicializados y la pila.
      \item Verifique que el programa de usuario "halt" funcione correctamente. 
    \end{enumerate}
  \section{ Carga del programa en la memoria}
  \begin{enumerate}
    \item Explique la manera en que el programa es cargado a la memoria
    \begin{enumerate}
      \item     Explique qué hace el método ReadAt de la clase OpenFile\\
      Este método toma la cantidad de bytes indicados en segundo parámetro, los lee desde la posición indicada en el tercer parámetro y los guarda en el buffer indicado como primer parámetro.
      \begin{enumerate}
        \item Explique la funcionalidad de los parámetros del método ReadAt\\
        Como se menciona anteriormente, el primero es el buffer donde se guardarán los bytes, el segundo es la cantidad y el tercero la posicion donde se empieza a leer.
      \end{enumerate}
      \item  Indique porqué hay dos llamados a este método\\
      Existen 2 métodos porque uno lee desde la última posición utilizada y el otro lee desde cualquier posición indicada por el tercer parámetro.
    \end{enumerate}
    \item  Haga un diagrama que muestre la estructura de los programas de NachOS
    \begin{enumerate}
      \item Estructura de los programas de usuario de NachOS en la arquitectura MIPS, formato NOFF, "in-disk image" 
      \item Estructura del encabezado de un programa de usuario de NachOS
      \item Describa en su informe la manera en que el programa puede ser leído por páginas (128 bytes)
      \begin{enumerate}
        \item Haga que se lea el segmento de texto (código) página por página\\
        para esto se compara si es mayor a la cnstante Pagetable y se pasa a memoria los 128 bytes
        \item Haga lo mismo que en el paso anterior para el segmento de datos
        \item Considere el caso en que los segmentos no son múltiplos exactos de una página\\
        como se mencioan anteriormente se verifica si el tamaño total restante es mayor a 128 bytes, de no serlo se cambia la variable bytesToCopy a la cantidad de bytes restantes.

        \item Asegúrese de reservar páginas para datos no inicializados y pila
        esto se logra mediante el cálculo de páginas por segmento como se muestra en el código siguiente
        \begin{lstlisting}
int codePages=divRoundUp(noffH.code.size,PageSize);
int dataPages=divRoundUp(noffH.initData.size,PageSize);
int unDataPages=divRoundUp(noffH.uninitData.size,PageSize);
int stackPages=divRoundUp(stackSize,PageSize);
numPages = codePages+dataPages+unDataPages+stackPages;
        \end{lstlisting}
      \end{enumerate}
      \item  Coloque las páginas de código y datos (128 bytes) leídas del archivos la posición de memoria correspondiente
      \begin{enumerate}
        \item La posición es la indicada por nuestro pequeño administrador de memoria, descrito en el punto 4). Está dada por la tabla de páginas del proceso\\
        Todos los puntos anteriores se muestran mediante el código siguiente:
        \begin{lstlisting}
int codeSize =  noffH.code.size;
int usedPages=0;
int bytesToCopy=PageSize;
while ( codeSize>0)
{
	if (codeSize<PageSize)
		bytesToCopy=codeSize;
	executable->ReadAt(&(machine->mainMemory[positions[usedPages]]),
	bytesToCopy, noffH.code.inFileAddr+usedPages*PageSize);
	codeSize-=PageSize;
}
        \end{lstlisting}
      \end{enumerate}
      \item Verifique que el programa de usuario "halt" funcione correctamente
      \item ¿Cuáles cosas deben deshacerse cuando el programa finaliza (llama a Exit)? 
    \end{enumerate}
    \item  Pruebas (anote los resultados en su informe)
    \begin {enumerate}
      \item Haga que algunas páginas (ejemplo 0,2,4,6,8,10) dentro de su administrador aparezcan como ocupadas antes de cargar cualquier programa en memoria, ésto se puede realizar dentro de constructor de "AddrSpace"\\
      Esto se logra mediante el llamado del método mark(n) del mapa de bits de la tabla.
      \item Verifique el programa "halt" funcione
      \item Compruebe que el programa addrspacetest funcione, recuerde guardarlo en el directorio "test"
      \item Libere las páginas del primer punto
      \item Corra de nuevo el programa "addrspacetest"
    \end{enumerate}

  \end{enumerate}

    
\end{document}
