#include "TableOpenFiles.h"

 TableOpenFiles::TableOpenFiles() 
{
    openFiles = new int(32);        // A vector with user opened files
    openFilesMap = new BitMap(32);  // A bitmap to control our vector
    int usage = 1;                  // How many threads are using this table
    openFilesMap->Mark(0);          // Se marcan los primeros 3 bits para el stdin, out y error. 
    openFilesMap->Mark(1);
    openFilesMap->Mark(2);
 };
 
TableOpenFiles::~TableOpenFiles()
{
    if (usage > 0)
    {
        delete openFiles;       // A vector with user opened files
        delete openFilesMap;    // A bitmap to control our vector
        int usage = 0;          // How many threads are using this table
    }
};
 
int TableOpenFiles::Open(long UnixHandle)
{
    long campo = openFilesMap->Find();  // Automaticamente a true.
    if (campo != -1)
    { 
        openFiles[campo] = UnixHandle;
    }
    return campo;
}

/*
 *	Metodo: OpenSemaforito() 
 * 	Efecto: Este metodo pone en el unixHandle de linux del semaforo el puntero del semaforo.
 *  Requiere: puntero del semaforo y la posicion donde guardarlo. 
 */
 
void TableOpenFiles::OpenSem( int posicion, long semaforo ){
	
		openFiles[posicion] = semaforo;
}

/*
 *	Metodo: Close() 
 * 	Efecto: Este metodo busca si en el lugar donde le indiquen segun el id del archivo,
 * 			se encuentra ocupado, si es asÃ­, entonces borrelo. (Clear) En bitmap. 
 *  Requiere: La posicion en donde se encuentra el id del archivo.
 * 	Modifica: Vector de archivos.
 */
 
 int  TableOpenFiles::Close( long NachosHandle ) {
	 
	 bool set = openFilesMap->Test(NachosHandle); // devuelve true si esta ocupado
	 if (set == true && NachosHandle > 2) { 
		openFilesMap->Clear(NachosHandle);
		return 0;
	 } 

	return -1;	
	 
};     

/*
 *	Metodo: isOpened() 
 * 	Efecto: Devuelve true si en la posicion indicada esta ocupada. 
 *  Requiere: El NachosHandle del archivo.
 */
 
bool  TableOpenFiles::isOpened( long NachosHandle ){
		return openFilesMap->Test(NachosHandle);
};


/*
 *	Metodo: getUnixHandle() 
 * 	Efecto: Retorna el valor en el vector segun la posicion indicada. 
 */
 	
long  TableOpenFiles::getUnixHandle( long NachosHandle ){
		return openFiles[NachosHandle];
		
};

/*
 *	Metodo: addThread() 
 * 	Efecto: Incrementa la variable usage.
 */
 
 void  TableOpenFiles::addThread() {  
	//usage incremeta para ver si mas hilos estan usando el mismo espacio
	usage++; 
};     
 
/*
 *	Metodo: delThread() 
 * 	Efecto: Decrementa la variable usage.
 */
 
 void  TableOpenFiles::delThread() { // If a user thread is using this table, delete it
		usage--;
		if (usage == 0) { 
			//delete this;
		}
	};

/*
 *	Metodo: darUsage() 
 * 	Efecto: Retorna la variable usage.
 */
 
 int  TableOpenFiles::getUsage() {  // If a user thread is using this table, add it
		return usage; 
 };   

 
     
